{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jeongyeon/Desktop/lecture_segmentation/web_dev/code/userstudy_t2/components/InnerVideo.jsx\";\nimport styled from \"styled-components\";\nimport _, { set } from \"lodash\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Rnd } from \"react-rnd\";\nimport { useAtom } from \"jotai\";\nimport { activityAtom, playingAtom } from \"../atom\";\nimport { darkModeAtom, lockAtom } from \"../atom\";\n\nfunction InnerVideo({\n  url,\n  startTime,\n  endTime,\n  addFixedData,\n  index\n}) {\n  const {\n    0: fixed,\n    1: setFixed\n  } = useState();\n  const {\n    0: onPlay,\n    1: setOnPlay\n  } = useState(false);\n  const [action] = useAtom(activityAtom);\n  const [playing] = useAtom(playingAtom);\n  const [lock] = useAtom(lockAtom);\n  const [dark] = useAtom(darkModeAtom);\n  const ref = useRef(null);\n  useEffect(() => {\n    if (action.time > startTime && playing) {\n      setOnPlay(true);\n    }\n  }, [action.time]);\n  useEffect(() => {\n    if (fixed) {\n      return;\n    }\n\n    if (action.time < startTime) {\n      setOnPlay(false);\n      ref.current.currentTime = 0;\n      return;\n    }\n\n    if (!index == action.slide) {\n      setOnPlay(false);\n      return;\n    }\n\n    if (!playing) {\n      setOnPlay(false);\n    }\n\n    if (action.action === \"jump\") {\n      ref.current.currentTime = action.time - startTime;\n    }\n\n    if (action.action === \"flip\") {\n      ref.current.currentTime = action.time - startTime;\n    }\n\n    if (playing) {\n      setOnPlay(true);\n      return;\n    }\n  }, [action.action, playing, index]);\n  useEffect(() => {\n    if (!ref.current) {\n      return;\n    }\n\n    if (onPlay) {\n      ref.current.play();\n    } else {\n      ref.current.pause();\n    }\n  }, [onPlay]);\n\n  const onClick = e => {\n    if (lock) {\n      return;\n    }\n\n    setFixed(true);\n    const {\n      top,\n      right,\n      bottom,\n      left,\n      height,\n      x,\n      y\n    } = e.currentTarget.firstChild.getBoundingClientRect();\n    const width = window.getComputedStyle(e.currentTarget.firstChild)[\"width\"];\n    addFixedData({\n      label: \"VIDEO\",\n      src: url,\n      startTime: startTime,\n      style: _.pick(window.getComputedStyle(e.currentTarget.firstChild), [\"font-size\", \"padding\", \"color\", \"background-color\"]),\n      top,\n      right,\n      bottom,\n      left,\n      width,\n      height,\n      x,\n      y\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    fixed: fixed,\n    onClick: onClick,\n    isDark: dark,\n    children: /*#__PURE__*/_jsxDEV(Video, {\n      src: url,\n      draggable: \"false\",\n      ref: ref,\n      playsInline: true,\n      muted: true,\n      playsInline: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n}\n\nconst Container = styled.div.withConfig({\n  displayName: \"InnerVideo__Container\",\n  componentId: \"sc-141hw4x-0\"\n})([\"display:flex;flex:1;flex-basis:0;overflow:hidden;visibility:\", \";background-color:\", \";\"], props => props.fixed ? \"hidden\" : \"visible\", props => props.isDark ? rgb(47, 48, 49) : \"white\");\nconst Video = styled.video.withConfig({\n  displayName: \"InnerVideo__Video\",\n  componentId: \"sc-141hw4x-1\"\n})([\"display:block;margin:0 auto;max-width:100%;max-height:100%;object-fit:fill;\"]);\nexport default /*#__PURE__*/React.memo(InnerVideo);","map":{"version":3,"sources":["/Users/jeongyeon/Desktop/lecture_segmentation/web_dev/code/userstudy_t2/components/InnerVideo.jsx"],"names":["styled","_","set","React","useEffect","useRef","useState","Rnd","useAtom","activityAtom","playingAtom","darkModeAtom","lockAtom","InnerVideo","url","startTime","endTime","addFixedData","index","fixed","setFixed","onPlay","setOnPlay","action","playing","lock","dark","ref","time","current","currentTime","slide","play","pause","onClick","e","top","right","bottom","left","height","x","y","currentTarget","firstChild","getBoundingClientRect","width","window","getComputedStyle","label","src","style","pick","Container","div","props","isDark","rgb","Video","video","memo"],"mappings":"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","sourcesContent":["import styled from \"styled-components\";\nimport _, { set } from \"lodash\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Rnd } from \"react-rnd\";\nimport { useAtom } from \"jotai\";\n\nimport { activityAtom, playingAtom } from \"../atom\";\nimport { darkModeAtom, lockAtom } from \"../atom\";\n\nfunction InnerVideo({ url, startTime, endTime, addFixedData, index }) {\n    const [fixed, setFixed] = useState();\n    const [onPlay, setOnPlay] = useState(false);\n    const [action] = useAtom(activityAtom);\n    const [playing] = useAtom(playingAtom);\n    const [lock] = useAtom(lockAtom);\n    const [dark] = useAtom(darkModeAtom);\n\n    const ref = useRef(null);\n    useEffect(() => {\n        if (action.time > startTime && playing) {\n            setOnPlay(true);\n        }\n    }, [action.time]);\n    useEffect(() => {\n        if (fixed) {\n            return;\n        }\n        if (action.time < startTime) {\n            setOnPlay(false);\n            ref.current.currentTime = 0;\n            return;\n        }\n        if (!index == action.slide) {\n            setOnPlay(false);\n            return;\n        }\n        if (!playing) {\n            setOnPlay(false);\n        }\n        if (action.action === \"jump\") {\n            ref.current.currentTime = action.time - startTime;\n        }\n\n        if (action.action === \"flip\") {\n            ref.current.currentTime = action.time - startTime;\n        }\n        if (playing) {\n            setOnPlay(true);\n            return;\n        }\n    }, [action.action, playing, index]);\n    useEffect(() => {\n        if (!ref.current) {\n            return;\n        }\n        if (onPlay) {\n            ref.current.play();\n        } else {\n            ref.current.pause();\n        }\n    }, [onPlay]);\n    const onClick = (e) => {\n        if (lock) {\n            return;\n        }\n        setFixed(true);\n        const { top, right, bottom, left, height, x, y } = e.currentTarget.firstChild.getBoundingClientRect();\n        const width = window.getComputedStyle(e.currentTarget.firstChild)[\"width\"];\n        addFixedData({\n            label: \"VIDEO\",\n            src: url,\n            startTime: startTime,\n            style: _.pick(window.getComputedStyle(e.currentTarget.firstChild), [\"font-size\", \"padding\", \"color\", \"background-color\"]),\n            top,\n            right,\n            bottom,\n            left,\n            width,\n            height,\n            x,\n            y,\n        });\n    };\n    return (\n        <Container fixed={fixed} onClick={onClick} isDark={dark}>\n            <Video src={url} draggable=\"false\" ref={ref} playsInline muted={true} playsInline />\n        </Container>\n    );\n}\n\nconst Container = styled.div`\n    display: flex;\n    flex: 1;\n    flex-basis: 0;\n    overflow: hidden;\n    visibility: ${(props) => (props.fixed ? \"hidden\" : \"visible\")};\n    background-color: ${(props) => (props.isDark ? rgb(47, 48, 49) : \"white\")};\n`;\nconst Video = styled.video`\n    display: block;\n    margin: 0 auto;\n    max-width: 100%;\n    max-height: 100%;\n    object-fit: fill;\n`;\n\nexport default React.memo(InnerVideo);\n"]},"metadata":{},"sourceType":"module"}