{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/Users/jeongyeon/Desktop/lecture_segmentation/web_dev/code/userstudy_t2/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/jeongyeon/Desktop/lecture_segmentation/web_dev/code/userstudy_t2/components/ProgressBar.jsx\",\n    _s = $RefreshSig$();\n\nimport styled from \"styled-components\";\nimport { useAtom } from \"jotai\";\nimport { useRef } from \"react\";\nimport { jumpAtom, percentAtom } from \"../atom\";\n\nfunction Control(_ref) {\n  _s();\n\n  var jump = _ref.jump;\n\n  var _useAtom = useAtom(percentAtom),\n      _useAtom2 = _slicedToArray(_useAtom, 1),\n      percent = _useAtom2[0];\n\n  var ref = useRef();\n\n  var jumpToPlay = function jumpToPlay(e) {\n    var percentPoint = e.nativeEvent.offsetX / ref.current.offsetWidth;\n    jump(percentPoint);\n  };\n\n  return /*#__PURE__*/_jsxDEV(ProgressBarLine, {\n    onClick: jumpToPlay,\n    ref: ref,\n    children: /*#__PURE__*/_jsxDEV(ProgressBarFilled, {\n      percent: percent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Control, \"CXSQMSPPm4SwdgoGLbx2ybKRMpY=\", false, function () {\n  return [useAtom];\n});\n\n_c = Control;\nvar ProgressBarLine = styled.div.withConfig({\n  displayName: \"ProgressBar__ProgressBarLine\",\n  componentId: \"sr7ew-0\"\n})([\"display:flex;width:100%;height:10px;margin-top:5px;margin-bottom:5px;display:flex;background-color:#adadad;cursor:pointer;\"]);\n_c2 = ProgressBarLine;\nvar ProgressBarFilled = styled.div.withConfig({\n  displayName: \"ProgressBar__ProgressBarFilled\",\n  componentId: \"sr7ew-1\"\n})([\"color:white;flex-basis:\", \"%;background-color:red;z-index:150;position:relative;\"], function (props) {\n  return props.percent;\n});\n_c3 = ProgressBarFilled;\nvar Circle = styled.div.withConfig({\n  displayName: \"ProgressBar__Circle\",\n  componentId: \"sr7ew-2\"\n})([\"width:15px;height:15px;position:absolute;left:calc(100% - 5px);top:-2px;background-color:red;border-radius:45%;\"]);\nexport default Control;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Control\");\n$RefreshReg$(_c2, \"ProgressBarLine\");\n$RefreshReg$(_c3, \"ProgressBarFilled\");","map":{"version":3,"sources":["/Users/jeongyeon/Desktop/lecture_segmentation/web_dev/code/userstudy_t2/components/ProgressBar.jsx"],"names":["styled","useAtom","useRef","jumpAtom","percentAtom","Control","jump","percent","ref","jumpToPlay","e","percentPoint","nativeEvent","offsetX","current","offsetWidth","ProgressBarLine","div","ProgressBarFilled","props","Circle"],"mappings":";;;;;;AAAA,OAAOA,MAAP,MAAmB,mBAAnB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,MAAT,QAAuB,OAAvB;AAEA,SAASC,QAAT,EAAmBC,WAAnB,QAAsC,SAAtC;;AAEA,SAASC,OAAT,OAA2B;AAAA;;AAAA,MAARC,IAAQ,QAARA,IAAQ;;AAAA,iBACLL,OAAO,CAACG,WAAD,CADF;AAAA;AAAA,MAChBG,OADgB;;AAEvB,MAAMC,GAAG,GAAGN,MAAM,EAAlB;;AACA,MAAMO,UAAU,GAAG,SAAbA,UAAa,CAACC,CAAD,EAAO;AACtB,QAAMC,YAAY,GAAGD,CAAC,CAACE,WAAF,CAAcC,OAAd,GAAwBL,GAAG,CAACM,OAAJ,CAAYC,WAAzD;AACAT,IAAAA,IAAI,CAACK,YAAD,CAAJ;AACH,GAHD;;AAIA,sBACI,QAAC,eAAD;AAAiB,IAAA,OAAO,EAAEF,UAA1B;AAAsC,IAAA,GAAG,EAAED,GAA3C;AAAA,2BACI,QAAC,iBAAD;AAAmB,MAAA,OAAO,EAAED;AAA5B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH;;GAZQF,O;UACaJ,O;;;KADbI,O;AAcT,IAAMW,eAAe,GAAGhB,MAAM,CAACiB,GAAV;AAAA;AAAA;AAAA,kIAArB;MAAMD,e;AAUN,IAAME,iBAAiB,GAAGlB,MAAM,CAACiB,GAAV;AAAA;AAAA;AAAA,yFAEL,UAACE,KAAD;AAAA,SAAWA,KAAK,CAACZ,OAAjB;AAAA,CAFK,CAAvB;MAAMW,iB;AAON,IAAME,MAAM,GAAGpB,MAAM,CAACiB,GAAV;AAAA;AAAA;AAAA,uHAAZ;AAUA,eAAeZ,OAAf","sourcesContent":["import styled from \"styled-components\";\nimport { useAtom } from \"jotai\";\nimport { useRef } from \"react\";\n\nimport { jumpAtom, percentAtom } from \"../atom\";\n\nfunction Control({ jump }) {\n    const [percent] = useAtom(percentAtom);\n    const ref = useRef();\n    const jumpToPlay = (e) => {\n        const percentPoint = e.nativeEvent.offsetX / ref.current.offsetWidth;\n        jump(percentPoint);\n    };\n    return (\n        <ProgressBarLine onClick={jumpToPlay} ref={ref}>\n            <ProgressBarFilled percent={percent}>{/* <Circle /> */}</ProgressBarFilled>\n        </ProgressBarLine>\n    );\n}\n\nconst ProgressBarLine = styled.div`\n    display: flex;\n    width: 100%;\n    height: 10px;\n    margin-top: 5px;\n    margin-bottom: 5px;\n    display: flex;\n    background-color: #adadad;\n    cursor: pointer;\n`;\nconst ProgressBarFilled = styled.div`\n    color: white;\n    flex-basis: ${(props) => props.percent}%;\n    background-color: red;\n    z-index: 150;\n    position: relative;\n`;\nconst Circle = styled.div`\n    width: 15px;\n    height: 15px;\n    position: absolute;\n    left: calc(100% - 5px);\n    top: -2px;\n    background-color: red;\n    border-radius: 45%;\n`;\n\nexport default Control;\n"]},"metadata":{},"sourceType":"module"}