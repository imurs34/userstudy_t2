{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jeongyeon/Desktop/lecture_segmentation/web_dev/code/userstudy_t2/components/RndVideo.jsx\";\nimport styled from \"styled-components\";\nimport _, { set } from \"lodash\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Rnd } from \"react-rnd\";\nimport { useAtom } from \"jotai\";\nimport { activityAtom, playingAtom } from \"../atom\";\n\nfunction RndVideo({\n  url,\n  startTime,\n  endTime,\n  index\n}) {\n  const {\n    0: onPlay,\n    1: setOnPlay\n  } = useState(false);\n  const [action] = useAtom(activityAtom);\n  const [playing] = useAtom(playingAtom);\n  const ref = useRef(null);\n  useEffect(() => {\n    if (action.time > startTime && playing) {\n      setOnPlay(true);\n    }\n  }, [action.time]);\n  useEffect(() => {\n    if (!index == action.slide) {\n      setOnPlay(false);\n      return;\n    }\n\n    if (action.time < startTime) {\n      setOnPlay(false);\n      ref.current.currentTime = 0;\n      return;\n    }\n\n    if (!playing) {\n      setOnPlay(false);\n    }\n\n    if (action.action === \"jump\") {\n      ref.current.currentTime = action.time - startTime;\n    }\n\n    if (playing) {\n      setOnPlay(true);\n      return;\n    }\n  }, [action.action, playing, index]);\n  useEffect(() => {\n    if (!ref.current) {\n      return;\n    }\n\n    if (onPlay) {\n      ref.current.play();\n    } else {\n      ref.current.pause();\n    }\n  }, [onPlay]);\n  return /*#__PURE__*/_jsxDEV(Video, {\n    src: url,\n    draggable: \"false\",\n    ref: ref,\n    playsInline: true,\n    muted: true,\n    playsInline: true\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 12\n  }, this);\n}\n\nconst Video = styled.video.withConfig({\n  displayName: \"RndVideo__Video\",\n  componentId: \"f9gmor-0\"\n})([\"height:100%;width:100%;object-fit:fill;display:block;\"]);\nexport default /*#__PURE__*/React.memo(RndVideo);","map":{"version":3,"sources":["/Users/jeongyeon/Desktop/lecture_segmentation/web_dev/code/userstudy_t2/components/RndVideo.jsx"],"names":["styled","_","set","React","useEffect","useRef","useState","Rnd","useAtom","activityAtom","playingAtom","RndVideo","url","startTime","endTime","index","onPlay","setOnPlay","action","playing","ref","time","slide","current","currentTime","play","pause","Video","video","memo"],"mappings":";;AAAA,OAAOA,MAAP,MAAmB,mBAAnB;AACA,OAAOC,CAAP,IAAYC,GAAZ,QAAuB,QAAvB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,GAAT,QAAoB,WAApB;AACA,SAASC,OAAT,QAAwB,OAAxB;AAEA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,SAA1C;;AAEA,SAASC,QAAT,CAAkB;AAAEC,EAAAA,GAAF;AAAOC,EAAAA,SAAP;AAAkBC,EAAAA,OAAlB;AAA2BC,EAAAA;AAA3B,CAAlB,EAAsD;AAClD,QAAM;AAAA,OAACC,MAAD;AAAA,OAASC;AAAT,MAAsBX,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACY,MAAD,IAAWV,OAAO,CAACC,YAAD,CAAxB;AACA,QAAM,CAACU,OAAD,IAAYX,OAAO,CAACE,WAAD,CAAzB;AACA,QAAMU,GAAG,GAAGf,MAAM,CAAC,IAAD,CAAlB;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIc,MAAM,CAACG,IAAP,GAAcR,SAAd,IAA2BM,OAA/B,EAAwC;AACpCF,MAAAA,SAAS,CAAC,IAAD,CAAT;AACH;AACJ,GAJQ,EAIN,CAACC,MAAM,CAACG,IAAR,CAJM,CAAT;AAKAjB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACW,KAAD,IAAUG,MAAM,CAACI,KAArB,EAA4B;AACxBL,MAAAA,SAAS,CAAC,KAAD,CAAT;AACA;AACH;;AACD,QAAIC,MAAM,CAACG,IAAP,GAAcR,SAAlB,EAA6B;AACzBI,MAAAA,SAAS,CAAC,KAAD,CAAT;AACAG,MAAAA,GAAG,CAACG,OAAJ,CAAYC,WAAZ,GAA0B,CAA1B;AACA;AACH;;AACD,QAAI,CAACL,OAAL,EAAc;AACVF,MAAAA,SAAS,CAAC,KAAD,CAAT;AACH;;AACD,QAAIC,MAAM,CAACA,MAAP,KAAkB,MAAtB,EAA8B;AAC1BE,MAAAA,GAAG,CAACG,OAAJ,CAAYC,WAAZ,GAA0BN,MAAM,CAACG,IAAP,GAAcR,SAAxC;AACH;;AACD,QAAIM,OAAJ,EAAa;AACTF,MAAAA,SAAS,CAAC,IAAD,CAAT;AACA;AACH;AACJ,GApBQ,EAoBN,CAACC,MAAM,CAACA,MAAR,EAAgBC,OAAhB,EAAyBJ,KAAzB,CApBM,CAAT;AAqBAX,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACgB,GAAG,CAACG,OAAT,EAAkB;AACd;AACH;;AACD,QAAIP,MAAJ,EAAY;AACRI,MAAAA,GAAG,CAACG,OAAJ,CAAYE,IAAZ;AACH,KAFD,MAEO;AACHL,MAAAA,GAAG,CAACG,OAAJ,CAAYG,KAAZ;AACH;AACJ,GATQ,EASN,CAACV,MAAD,CATM,CAAT;AAUA,sBAAO,QAAC,KAAD;AAAO,IAAA,GAAG,EAAEJ,GAAZ;AAAiB,IAAA,SAAS,EAAC,OAA3B;AAAmC,IAAA,GAAG,EAAEQ,GAAxC;AAA6C,IAAA,WAAW,MAAxD;AAAyD,IAAA,KAAK,EAAE,IAAhE;AAAsE,IAAA,WAAW;AAAjF;AAAA;AAAA;AAAA;AAAA,UAAP;AACH;;AAED,MAAMO,KAAK,GAAG3B,MAAM,CAAC4B,KAAV;AAAA;AAAA;AAAA,6DAAX;AAOA,4BAAezB,KAAK,CAAC0B,IAAN,CAAWlB,QAAX,CAAf","sourcesContent":["import styled from \"styled-components\";\nimport _, { set } from \"lodash\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Rnd } from \"react-rnd\";\nimport { useAtom } from \"jotai\";\n\nimport { activityAtom, playingAtom } from \"../atom\";\n\nfunction RndVideo({ url, startTime, endTime, index }) {\n    const [onPlay, setOnPlay] = useState(false);\n    const [action] = useAtom(activityAtom);\n    const [playing] = useAtom(playingAtom);\n    const ref = useRef(null);\n\n    useEffect(() => {\n        if (action.time > startTime && playing) {\n            setOnPlay(true);\n        }\n    }, [action.time]);\n    useEffect(() => {\n        if (!index == action.slide) {\n            setOnPlay(false);\n            return;\n        }\n        if (action.time < startTime) {\n            setOnPlay(false);\n            ref.current.currentTime = 0;\n            return;\n        }\n        if (!playing) {\n            setOnPlay(false);\n        }\n        if (action.action === \"jump\") {\n            ref.current.currentTime = action.time - startTime;\n        }\n        if (playing) {\n            setOnPlay(true);\n            return;\n        }\n    }, [action.action, playing, index]);\n    useEffect(() => {\n        if (!ref.current) {\n            return;\n        }\n        if (onPlay) {\n            ref.current.play();\n        } else {\n            ref.current.pause();\n        }\n    }, [onPlay]);\n    return <Video src={url} draggable=\"false\" ref={ref} playsInline muted={true} playsInline />;\n}\n\nconst Video = styled.video`\n    height: 100%;\n    width: 100%;\n    object-fit: fill;\n    display: block;\n`;\n\nexport default React.memo(RndVideo);\n"]},"metadata":{},"sourceType":"module"}