'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jotai = require('jotai');
var reactQuery = require('react-query');

var queryClientAtom = jotai.atom(function () {
  return new reactQuery.QueryClient();
});

function atomWithQuery(createQuery, equalityFn) {
  if (equalityFn === void 0) {
    equalityFn = Object.is;
  }

  var stateAtom = jotai.atom(function () {
    var state = {
      resolve: null,
      setData: null,
      prevData: null,
      unsubscribe: null,
      handle: function handle(result) {
        if (result.data === undefined || this.prevData !== null && equalityFn(this.prevData, result.data)) {
          return;
        }

        this.prevData = result.data;

        if (this.resolve) {
          this.resolve(result.data);
          this.resolve = null;
        } else if (this.setData) {
          this.setData(result.data);
        } else {
          throw new Error('setting data without mount');
        }
      }
    };
    return state;
  });
  var initAtom = jotai.atom(function (get) {
    var options = typeof createQuery === 'function' ? createQuery(get) : createQuery;
    var state = get(stateAtom);
    var dataAtom = jotai.atom(new Promise(function (resolve) {
      state.resolve = resolve;
    }));
    state.prevData = null;
    var queryClient = get(queryClientAtom);
    var observer = new reactQuery.QueryObserver(queryClient, options);
    state.unsubscribe == null ? void 0 : state.unsubscribe();
    state.unsubscribe = observer.subscribe(function (result) {
      state.handle(result);
    });
    return {
      dataAtom: dataAtom,
      options: options
    };
  }, function (get, set, action) {
    switch (action.type) {
      case 'mount':
        {
          var state = get(stateAtom);

          state.setData = function (data) {
            var _get2 = get(initAtom),
                dataAtom = _get2.dataAtom;

            set(dataAtom, data);
          };

          return;
        }

      case 'cleanup':
        {
          var _get3 = get(stateAtom),
              unsubscribe = _get3.unsubscribe;

          unsubscribe == null ? void 0 : unsubscribe();
          return;
        }

      case 'refetch':
        {
          var _queryClient$getQuery;

          var _state = get(stateAtom);

          var _get4 = get(initAtom),
              dataAtom = _get4.dataAtom,
              options = _get4.options;

          set(dataAtom, new Promise(function (resolve) {
            _state.resolve = resolve;
          }));
          var queryClient = get(queryClientAtom);
          (_queryClient$getQuery = queryClient.getQueryCache().find(options.queryKey)) == null ? void 0 : _queryClient$getQuery.reset();
          var p = queryClient.refetchQueries(options.queryKey);
          return p;
        }
    }
  });

  initAtom.onMount = function (dispatch) {
    dispatch({
      type: 'mount'
    });
    return function () {
      return dispatch({
        type: 'cleanup'
      });
    };
  };

  var queryAtom = jotai.atom(function (get) {
    var _get5 = get(initAtom),
        dataAtom = _get5.dataAtom;

    return get(dataAtom);
  }, function (_get, set, action) {
    return set(initAtom, action);
  });
  return queryAtom;
}

exports.atomWithQuery = atomWithQuery;
exports.queryClientAtom = queryClientAtom;
