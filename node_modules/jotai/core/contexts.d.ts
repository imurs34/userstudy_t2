import type { Context } from 'react';
import type { Atom, WritableAtom, Scope } from './atom';
import type { State } from './vanilla';
import { createMutableSource } from './useMutableSource';
declare type MutableSource<_Target> = ReturnType<typeof createMutableSource>;
declare type UpdateAtom = <Value, Update>(atom: WritableAtom<Value, Update>, update: Update) => void;
declare type CommitCallback = () => void;
declare type StoreForProduction = [
    stateMutableSource: MutableSource<State>,
    updateAtom: UpdateAtom,
    commitCallback: CommitCallback
];
export declare type StoreForDevelopment = [
    stateMutableSource: MutableSource<State>,
    updateAtom: UpdateAtom,
    commitCallback: CommitCallback,
    debugMutableSource: MutableSource<{
        version: number;
        atoms: Atom<unknown>[];
        state: State;
        listeners: Set<() => void>;
    }>,
    restore: (values: Iterable<readonly [Atom<unknown>, unknown]>) => void
];
export declare type Store = StoreForProduction | StoreForDevelopment;
declare type CreateStore = (initialValues?: Iterable<readonly [Atom<unknown>, unknown]>) => Store;
export declare const createStore: CreateStore;
declare type StoreContext = Context<Store>;
export declare const getStoreContext: (scope?: Scope | undefined) => StoreContext;
export declare const isDevStore: (store: Store) => store is StoreForDevelopment;
export {};
