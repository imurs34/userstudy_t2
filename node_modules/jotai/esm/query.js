import { atom } from 'jotai';
import { QueryClient, QueryObserver } from 'react-query';

const queryClientAtom = atom(() => new QueryClient());

function atomWithQuery(createQuery, equalityFn = Object.is) {
  const stateAtom = atom(() => {
    const state = {
      resolve: null,
      setData: null,
      prevData: null,
      unsubscribe: null,
      handle(result) {
        if (result.data === void 0 || this.prevData !== null && equalityFn(this.prevData, result.data)) {
          return;
        }
        this.prevData = result.data;
        if (this.resolve) {
          this.resolve(result.data);
          this.resolve = null;
        } else if (this.setData) {
          this.setData(result.data);
        } else {
          throw new Error("setting data without mount");
        }
      }
    };
    return state;
  });
  const initAtom = atom((get) => {
    var _a;
    const options = typeof createQuery === "function" ? createQuery(get) : createQuery;
    const state = get(stateAtom);
    const dataAtom = atom(new Promise((resolve) => {
      state.resolve = resolve;
    }));
    state.prevData = null;
    const queryClient = get(queryClientAtom);
    const observer = new QueryObserver(queryClient, options);
    (_a = state.unsubscribe) == null ? void 0 : _a.call(state);
    state.unsubscribe = observer.subscribe((result) => {
      state.handle(result);
    });
    return { dataAtom, options };
  }, (get, set, action) => {
    var _a;
    switch (action.type) {
      case "mount": {
        const state = get(stateAtom);
        state.setData = (data) => {
          const { dataAtom } = get(initAtom);
          set(dataAtom, data);
        };
        return;
      }
      case "cleanup": {
        const { unsubscribe } = get(stateAtom);
        unsubscribe == null ? void 0 : unsubscribe();
        return;
      }
      case "refetch": {
        const state = get(stateAtom);
        const { dataAtom, options } = get(initAtom);
        set(dataAtom, new Promise((resolve) => {
          state.resolve = resolve;
        }));
        const queryClient = get(queryClientAtom);
        (_a = queryClient.getQueryCache().find(options.queryKey)) == null ? void 0 : _a.reset();
        const p = queryClient.refetchQueries(options.queryKey);
        return p;
      }
    }
  });
  initAtom.onMount = (dispatch) => {
    dispatch({ type: "mount" });
    return () => dispatch({ type: "cleanup" });
  };
  const queryAtom = atom((get) => {
    const { dataAtom } = get(initAtom);
    return get(dataAtom);
  }, (_get, set, action) => set(initAtom, action));
  return queryAtom;
}

export { atomWithQuery, queryClientAtom };
